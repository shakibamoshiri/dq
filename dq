#!/usr/bin/env node

const http = require('http');

const commander = require('commander'); // (normal include)
const cli = new commander.Command();

cli
    .option('-q, --query <value...>', 'a query, e.g. name status pid ip')
    .option('-p, --pad <number>', 'a number for padding', 1 )
    .option('-t, --table', 'output in table format')
    .option('-l, --list', 'list of queries')
    .option('-W, --watch', 'watch docker events')
    .option('-T, --time', 'show query time' )
    .option('-D, --node-disable-colors', 'set NODE_DISABLE_COLORS=1')
    .option('-v, --version', 'version' ) ;

cli.parse(process.argv);
const options = cli.opts();

const log = console.log.bind( console );
console.time('time');


const CLI_VERSION='1.3.1';

const dockerApi = {
    socketPath: '/var/run/docker.sock',
    containerPath: '/containers/json?all=1',
    networkPath: '/networks',
    eventsPath: '/events'
};

function sendRequest( pathApi ){
    const requestOptions = {
        socketPath: dockerApi.socketPath,
        path: pathApi
    };
    return new Promise(function( resolve, reject ){
    http.request( requestOptions,

        function( response ){
            let jsonData = '';
            response.on( 'data', function( data ){
                jsonData += data;
            })

            response.on( 'close', function( code ){
                const statusCode = response.statusCode;
                if( statusCode === 200 ){
                    resolve( jsonData );
                } else {
                    // log( `Error in response.on.close: ${statusCode}` );
                    // throw new Error( `Error in response.on.close: ${statusCode}` );
                    log( 'statusCode: ', statusCode );
                    log( 'pathApi: ', pathApi );
                    reject( `Error in response.on.close: ${statusCode}` );
                }
            })
            response.on( 'error', function( error ){
                const statusCode = response.statusCode;
                log( `Error in response.on.error: ${statusCode}` );
                reject( `Error in response.on.error: ${statusCode}` );
            })
        })
    .end();
    })
}

function watchEvents( pathApi, queries, queryType ){
    return new Promise(function( resolve, reject ){
    http.request(
        {
          socketPath: dockerApi.socketPath,
          path: pathApi
        },
        function( response ){
            const statusCode = response.statusCode;
            if( statusCode != 200 ){
                log( `Error in response: ${statusCode}` );
                reject( `Error in response: ${statusCode}` );
            };


            response.on( 'data', async function( data ){
                const chunk = data.toString();

                response.pause();

                const json =  JSON.parse( chunk );
                if( json.Type === 'container' ){
                    if( json.id !== undefined && json.status !== 'destroy' ){
                        // resolve( json.id );

                        let tmpContainers = [];
                        tmpContainers.push( json.id );

                        const containers =
                        tmpContainers.map(function( id ){
                            return `/containers/${id}/json`;

                        }).map(async function( containerApiPath ){
                            const c = await sendRequest( containerApiPath );
                            const r = JSON.parse( c );
                            return r;
                        });

                        const tableArray = await getContainerData( containers, queries );
                        if( queryType === 'watch' ){
                            printTableHeader( tableArray, queries );
                            queryType = '';
                        }
                        printTableContent( tableArray, queries );

                    }
                }

                response.resume();
            });
            response.on( 'end', function( data ){
                log('on end');
            })
            response.on( 'fnish', function( data ){
                log( 'on finish' );
            })
            response.on( 'error', function( data ){
                log( 'on error' );
            });
        })
    .end();
    })
}

// watchEvents( dockerApi.eventsPath )
// .then(function( containerId ){
//     log( 'container-id: ' );
//     log( containerId );
// }).catch(function( error ){
//     log( error.message );
// })

async function getContainerData( containers, queries, listOfnetworks ){
    const tableArray = [];
    let table = {};

    for( con of containers ){
        await con.then(function( json ){
            for( query of queries ){
                switch( query ){
                    case 'image':
                        const image = json.Config.Image;
                        table[ query ] = image;
                    break;
                    case 'ip':
                    case 'ips':
                        const tip = json.NetworkSettings.Networks;
                        const ip = Object.values( tip ).map(function( net ){
                            return net.IPAddress;
                        })
                        table[ query ] = ip;
                    break;
                    case 'gw':
                    case 'gateway':
                        const tgw = Object.keys( json.NetworkSettings.Networks );

                        const gw =
                        tgw.map(function( mine ){
                            return listOfnetworks.filter(function( net ){
                                return net.Name == mine;
                            })
                        }).flat()
                        .map(function( net ){
                            return net.IPAM.Config;
                        }).flat()
                        .map(function( net ){
                            return net.Gateway;
                        }).flat();

                        table[ query ] = gw;
                    break;
                    case 'subnet':
                        const tsubnet = Object.keys( json.NetworkSettings.Networks );

                        const subnet =
                        tsubnet.map(function( mine ){
                            return listOfnetworks.filter(function( net ){
                                return net.Name == mine;
                            })
                        }).flat()
                        .map(function( net ){
                            return net.IPAM.Config;
                        }).flat()
                        .map(function( net ){
                            return net.Subnet;
                        }).flat();

                        table[ query ] = subnet;
                    break;
                    case 'scope':
                        const tscope = Object.keys( json.NetworkSettings.Networks );
                        const scope =
                        tscope.map(function( mine ){
                            return listOfnetworks.filter(function( net ){
                                return net.Name == mine;
                            })
                        }).flat()
                        .map(function( net ){
                            return net.Scope;
                        })
                        table[ query ] = scope;
                    break;
                    case 'mac':
                    case 'macaddress':
                        const tmac = json.NetworkSettings.Networks;
                        const mac = Object.values( tmac ).map(function( net ){
                            return net.MacAddress;
                        })
                        table[ query ] = mac;
                    break;
                    case 'cmd':
                        const cmd = json.Config.Cmd.join(' ')
                        table[ query ] = cmd
                    break;
                    case 'hostname':
                        const hostname = json.Config.Hostname;
                        table[ query ] = hostname;
                    break;
                    case 'id':
                        const id = json.Id;
                        table[ query ] = id;
                    break;
                    case 'pid':
                        const pid = json.State.Pid;
                        table[ query ] = pid;
                    break;
                    case 'name':
                        const name = json.Name.substr(1);
                        table[ query ] = name;
                    break;
                    case 'status':
                        const status = json.State.Status;
                        table[ query ] = status;
                    break;
                    case 'port':
                    case 'ports':
                    case 'ports.con':
                        const ports =  Object.keys( json.NetworkSettings.Ports );
                        table[ query ] = ports;
                    break;
                    case 'hostport':
                    case 'hostports':
                    case 'ports.host':
                        const thostports = json.NetworkSettings.Ports;
                        const hostports =
                        Object.values( thostports ).
                        flat().
                        map(function( obj ){
                            return Object.values( obj );
                        }).
                        map(function( array ){
                            return array[ 1 ]
                        })
                        table[ query ] = hostports;
                    break;
                    case 'hostip':
                    case 'hostips':
                        const thostip = json.NetworkSettings.Ports;
                        const hostip =
                        Object.values( thostip ).
                        flat().
                        map(function( obj ){
                            return Object.values( obj );
                        }).
                        map(function( array ){
                            return array[ 0 ]
                        })
                        table[ query ] = hostip;
                    break;
                    case 'exit':
                    case 'exitcode':
                        const exitcode = json.State.ExitCode;
                        table[ query ] = exitcode;
                    break;
                    case 'net':
                    case 'nets':
                    case 'network':
                    case 'networks':
                        const networks = Object.keys( json.NetworkSettings.Networks );


                        table[ query ] = networks;
                    break;
                    default:
                        table[ query ] = '?';
                }
            }
            tableArray.push( table );
            table = {};
        }).catch(function( error ){
            log( 'getContainerData: ', error );
        });
    }
    return tableArray;
}

function printf( text, space  ) {
    text = text + " ";
    try{ 
        text = text + ( " ".repeat( ( space - text.length ) ) );
    } catch( error ){
        log( error.message );
        log( `The length ${space} is not enough` );
        log( 'Please increase space with -p | --pad <number>' );
        process.exit(0);
    }
    return text;
}

function printTableHeader( tableArray, queries ){
    let PAD_SIZE = 1;
    if( options.pad ){
        PAD_SIZE = parseInt( options.pad );
    }

    if( options.table ){
        return;
        // console.table( tableArray );
    } else {

        // max size of each column should be determined
        const tableSize = {};
        for( q of queries ){
            let maxLength = 0;
            for( obj of tableArray ){
                const length = String( obj[ q ] ).length;
                if( length > maxLength ){
                    maxLength = length;
                }
            }
            tableSize[ q ] = maxLength;

            // edge case
            // when a column size is smaller than title size
            if( q.length > maxLength ){
                tableSize[ q ] = q.length;
            }
        }
        
        // print the table header
        for( q of queries ){
            const r = printf( q, tableSize[ q ] + PAD_SIZE );
            process.stdout.write( r );
        }
        process.stdout.write( "\n" );
    }
}

function printTableContent( tableArray, queries ){
    let PAD_SIZE = 1;
    if( options.pad ){
        PAD_SIZE = parseInt( options.pad );
    }

    if( options.table ){
        console.table( tableArray );
    } else {

        // max size of each column should be determined
        const tableSize = {};
        for( q of queries ){
            let maxLength = 0;
            for( obj of tableArray ){
                const length = String( obj[ q ] ).length;
                if( length > maxLength ){
                    maxLength = length;
                }
            }
            tableSize[ q ] = maxLength;

            // edge case
            // when a column size is smaller than title size
            if( q.length > maxLength ){
                tableSize[ q ] = q.length;
            }
        }
        
        // print the table content
        for( obj of tableArray ){
            for( q of queries ){
                const r = printf( obj[ q ], tableSize[ q ] + PAD_SIZE );
                process.stdout.write( r );
            }
            process.stdout.write( "\n" );
        }
    }
}


function listOfQuery(){
    const list = {
        image: 'Name of an image for a container',
        ip: 'IP address of a container',
        ip: 'An alias for: ip',
        gateway: 'Gateway of a container',
        gw: 'An alias for: gateway',
        subnet: 'Sub-network of a container',
        scope: 'Scope of a network for a container',
        mac: 'MAC address of a container',
        macaddress: 'An alias for: mac',
        cmd: 'Coomand that a container has been running with',
        hostname: 'Hostname of a container',
        id: 'Full ID of a container',
        pid: 'Process ID of a container',
        name: 'Name of a container',
        status: 'Status of a container',
        ports: 'Ports of a container',
        port: 'An alias for: ports',
        'ports.con': 'An alias for: ports',
        hostports: 'Host ports of a container',
        hostport: 'An alias for: hostports',
        'ports.host': 'An alias for: hostports',
        hostips: 'Host-IP of a container',
        hostip: 'An alias for: hostips',
        exit: 'Exit code of a container',
        exitcode: 'An alias for: exit',
        net: 'Network of a container',
        nets: 'An alias for: net',
        network: 'An alias for: net',
        networks: 'An alias for: net'
    };

    const arrayOfLengths =
    Object.keys( list ).
    map(function( name ){
        return name.length
    });

    const maxLength = Math.max( ...arrayOfLengths );

    for( name in list ){
        const p = printf( name, maxLength + 1 );
        log( p, list[name] );
    }
}

function moreAboutMe(){
    log(`version: ${CLI_VERSION}`);
}

async function dockerQuery( queryType ){
    const allContainers = await sendRequest( dockerApi.containerPath );

    const containers =
    JSON.parse( allContainers )
    .map(function( con ){
        return con.Id;

    }).map(function( id ){
        return `/containers/${id}/json`;

    }).map(async function( containerApiPath ){
        const c = await sendRequest( containerApiPath );
        const r = JSON.parse( c );
        return r;
    });

    const networkJson = await sendRequest( dockerApi.networkPath );
    const listOfnetworks = JSON.parse( networkJson );


    if( options.nodeDisableColors ){
        process.env['NODE_DISABLE_COLORS']=1;
    } else {
        process.env['NODE_DISABLE_COLORS']=0;
    }

    if( options.list ){
        listOfQuery();
        process.exit( 0 );
    }
    
    if( options.version ){
        moreAboutMe();
        process.exit( 0 );
    }

    if ( !options.query ){
        log( cli.help());
    }

    const queries = options.query;
    if( options.watch ){
        const queryType = 'watch';
        watchEvents( dockerApi.eventsPath, queries, queryType )

    } else {
        const tableArray = await getContainerData( containers, queries, listOfnetworks );
        printTableHeader( tableArray, queries  );
        printTableContent( tableArray, queries );
    }

    
    if( options.time ){
        process.stdout.write( "\n" );
        console.timeEnd( 'time' );
    }

};

dockerQuery();

